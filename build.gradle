buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "com.wynprice.cursemaven" version "2.1.5"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

version = mod_version
group = "se.gory_moon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Chargers-$mc_version"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mcp_channel, version: mcp_mappings

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                chargers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                chargers {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'chargers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                chargers {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.chargers.repack.registrate'
    classifier = ''
}

build.dependsOn shadowJar

shadowJar.finalizedBy('reobfJar')

repositories {
    mavenCentral()
    maven { // curios
        url "https://maven.theillusivec4.top/"
    }
    maven { // Registrate
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    //deobfCompile "com.azanor.baubles:Baubles:1.12-1.5.2"
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    def registrate = "com.tterrag.registrate:Registrate:MC1.16.2-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    runtimeOnly fg.deobf("curse.maven:immersive-engineering:3102280")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    classifier = 'sources'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
task deobfJar(type: ShadowJar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output

    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.chargers.repack.registrate'

    classifier = 'deobf'
}

task forgelibJar(type: Jar) {
    description = 'Creates a compiled JAR which also contains raw sources.'
    from sourceSets.main.output
    from sourceSets.main.allJava
    classifier = 'forgelib'
}


artifacts {
    archives sourcesJar
    archives deobfJar
    archives forgelibJar
}

jar {
    manifest {
        attributes([
            "Specification-Title": "chargers",
            "Specification-Vendor": "Gory_Moon",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Gory_Moon",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

if (project.hasProperty("local_maven")) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                version = "$mc_version-${project.getVersion()}"

                // Allows the maven pom file to be modified.
                pom.withXml {
                    // Go through all the dependencies.
                    asNode().dependencies.dependency.each { dep ->

                        // Check if the dependency has been mapped with MCP
                        if (dep.version.last().value().last().contains('_mapped_snapshot_') || dep.version.last().value().last().contains('_mapped_stable_')) {

                            // Remove the MCP mapped artifact from the dependency list.
                            println 'Surpressing MCP mapped artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                            assert dep.parent().remove(dep)
                        }
                    }
                }

                // Adds the sources as an artifact.
                artifact sourcesJar {
                    classifier 'sources'
                }

                // Adds the deobfuscated jar as an artifact.
                artifact deobfJar {
                    classifier 'deobf'
                }

                artifact forgelibJar {
                    classifier 'forgelib'

                }
            }
            repositories {
                maven {
                    url "file://${project.getProperty('local_maven')}"
                }
            }
        }
    }
}

// Jar Signing
import net.minecraftforge.gradle.common.task.SignJar
task signJar(type: SignJar, dependsOn: shadowJar) {

    onlyIf {
        project.hasProperty('keyStore')
    }

    if (project.hasProperty('keyStore')) {
        project.logger.info('Signing jar ' + jar.archivePath.getName());

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStorePass')
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }

    else {
        project.logger.warn('Could not sign ' + jar.archivePath.getName() + '. No keyStore property could be found')
    }
}

build.dependsOn signJar
