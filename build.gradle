buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

repositories {
    mavenCentral()
    maven {
        name = "thiakil"
        url = "http://maven.thiakil.com"
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = mod_version
group = "se.gory_moon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Chargers-" + mc_version

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = mc_version + "-" + forge_version
    runDir = "run"

    mappings = "stable_39"

    replaceIn "ModInfo.java"
    replace "@MOD_VERSION@", project.version
    replace "@FINGERPRINT@", project.findProperty('signSHA1')
}

dependencies {
    deobfCompile "com.azanor.baubles:Baubles:1.12-1.5.2"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'dev'
}

artifacts {
    archives devJar
    archives sourceJar
}

task signJar(type: SignJar, dependsOn: ["jar", "devJar"]) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStorePass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran.
build.dependsOn signJar

task("uploadJars", dependsOn: "build") {
    description = "uploads JARs"
    if (project.hasProperty("local_maven")) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://${local_maven}")
                    pom.artifactId = "Chargers"
                    pom.version = mc_version + "-" + project.version
                }
            }
        }
    }
}